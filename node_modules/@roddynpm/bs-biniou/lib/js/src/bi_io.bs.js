// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Obj = require("bs-platform/lib/js/obj.js");
var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Bi_util = require("./bi_util.bs.js");
var Bi_vint = require("./bi_vint.bs.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Bi_inbuf = require("./bi_inbuf.bs.js");
var Bi_share = require("./bi_share.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Bi_outbuf = require("./bi_outbuf.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Caml_float = require("bs-platform/lib/js/caml_float.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Easy_format = require("@roddynpm/bs-easy-format/lib/js/src/easy_format.bs.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make_signed(x) {
  if (x > 1073741823) {
    return x - -2147483648 | 0;
  } else {
    return x;
  }
}

function hash_name(s) {
  var accu = 0;
  for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){
    accu = Caml_int32.imul(223, accu) + Caml_string.get(s, i) | 0;
  }
  accu = accu & 2147483647;
  return make_signed(accu);
}

var n = Bi_util.int_size - 31 | 0;

if (n < 0) {
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "bi_io.ml",
          85,
          2
        ]
      ];
}

function mask_31bit(x) {
  return ((x << n) >>> n) | 0;
}

function write_hashtag(ob, h, has_arg) {
  var h$1 = mask_31bit(h);
  var pos = Bi_outbuf.alloc(ob, 4);
  var s = ob[/* o_s */0];
  s[pos + 3 | 0] = Char.chr(h$1 & 255);
  var h$2 = (h$1 >>> 8);
  s[pos + 2 | 0] = Char.chr(h$2 & 255);
  var h$3 = (h$2 >>> 8);
  s[pos + 1 | 0] = Char.chr(h$3 & 255);
  var h$4 = (h$3 >>> 8);
  s[pos] = Char.chr(has_arg ? h$4 | 128 : h$4);
  return /* () */0;
}

function string_of_hashtag(h, has_arg) {
  var ob = Bi_outbuf.create(undefined, undefined, 4);
  write_hashtag(ob, h, has_arg);
  return Bi_outbuf.contents(ob);
}

function read_hashtag(ib, cont) {
  var i = Bi_inbuf.read(ib, 4);
  var s = ib[/* i_s */0];
  var x0 = Caml_bytes.get(s, i);
  var has_arg = x0 >= 128;
  var x1 = ((x0 & 127) << 24);
  var x2 = (Caml_bytes.get(s, i + 1 | 0) << 16);
  var x3 = (Caml_bytes.get(s, i + 2 | 0) << 8);
  var x4 = Caml_bytes.get(s, i + 3 | 0);
  var h = make_signed(x1 | x2 | x3 | x4);
  return Curry._3(cont, ib, h, has_arg);
}

function read_field_hashtag(ib) {
  var i = Bi_inbuf.read(ib, 4);
  var s = ib[/* i_s */0];
  var x0 = s[i];
  if (x0 < 128) {
    Bi_util.error("Corrupted data (invalid field hashtag)");
  }
  var x1 = ((x0 & 127) << 24);
  var x2 = (s[i + 1 | 0] << 16);
  var x3 = (s[i + 2 | 0] << 8);
  var x4 = s[i + 3 | 0];
  return make_signed(x1 | x2 | x3 | x4);
}

function write_numtag(ob, i, has_arg) {
  if (i < 0 || i > 127) {
    Bi_util.error("Corrupted data (invalid numtag)");
  }
  var x = has_arg ? i | 128 : i;
  return Bi_outbuf.add_char(ob, Char.chr(x));
}

function read_numtag(ib, cont) {
  var i = Bi_inbuf.read(ib, 1);
  var x = Caml_bytes.get(ib[/* i_s */0], i);
  var has_arg = x >= 128;
  return Curry._3(cont, ib, x & 127, has_arg);
}

function make_unhash(l) {
  var tbl = Hashtbl.create(undefined, (List.length(l) << 2));
  List.iter((function (s) {
          var h = hash_name(s);
          try {
            var match = Hashtbl.find(tbl, h);
            if (match !== undefined) {
              var s$prime = match;
              if (s !== s$prime) {
                return Pervasives.failwith(Curry._2(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "Bi_io.make_unhash: ",
                                        /* Caml_string */Block.__(3, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                " and ",
                                                /* Caml_string */Block.__(3, [
                                                    /* No_padding */0,
                                                    /* String_literal */Block.__(11, [
                                                        " have the same hash, please pick another name",
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ]),
                                    "Bi_io.make_unhash: %S and %S have the same hash, please pick another name"
                                  ]), s, s$prime));
              } else {
                return 0;
              }
            } else {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "bi_io.ml",
                      169,
                      13
                    ]
                  ];
            }
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return Hashtbl.add(tbl, h, s);
            } else {
              throw exn;
            }
          }
        }), l);
  return (function (h) {
      try {
        return Hashtbl.find(tbl, h);
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return ;
        } else {
          throw exn;
        }
      }
    });
}

function write_tag(ob, x) {
  return Bi_outbuf.add_char(ob, Char.chr(x));
}

function write_untagged_unit(ob, param) {
  return Bi_outbuf.add_char(ob, /* "\000" */0);
}

function write_untagged_bool(ob, x) {
  return Bi_outbuf.add_char(ob, x ? /* "\001" */1 : /* "\000" */0);
}

var write_untagged_char = Bi_outbuf.add_char;

function write_untagged_int8(ob, x) {
  return Bi_outbuf.add_char(ob, Char.chr(x));
}

function write_untagged_int16(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr((x >>> 8)));
  return Bi_outbuf.add_char(ob, Char.chr(x & 255));
}

function write_untagged_int32(ob, x) {
  var high = (x >>> 16);
  Bi_outbuf.add_char(ob, Char.chr((high >>> 8)));
  Bi_outbuf.add_char(ob, Char.chr(high & 255));
  var low = x;
  Bi_outbuf.add_char(ob, Char.chr((low >>> 8) & 255));
  return Bi_outbuf.add_char(ob, Char.chr(low & 255));
}

function write_untagged_float32(ob, x) {
  return write_untagged_int32(ob, Caml_float.caml_int32_bits_of_float(x));
}

var float_endianness = Caml_obj.caml_lazy_make((function (param) {
        var match = (1.0).charCodeAt(0);
        if (match !== 63) {
          if (match !== 0) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "bi_io.ml",
                    212,
                    11
                  ]
                ];
          } else {
            return /* Little */624392470;
          }
        } else {
          return /* Big */3305632;
        }
      }));

function read_untagged_float64(ib) {
  var i = Bi_inbuf.read(ib, 8);
  var s = ib[/* i_s */0];
  var x = Block.__(Obj.double_tag, [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
  var match = CamlinternalLazy.force(float_endianness);
  if (match >= 624392470) {
    for(var j = 0; j <= 7; ++j){
      x[7 - j | 0] = s[i + j | 0];
    }
  } else {
    for(var j$1 = 0; j$1 <= 7; ++j$1){
      x[j$1] = s[i + j$1 | 0];
    }
  }
  return x;
}

function write_untagged_float64(ob, x) {
  var i = Bi_outbuf.alloc(ob, 8);
  var s = ob[/* o_s */0];
  var match = CamlinternalLazy.force(float_endianness);
  if (match >= 624392470) {
    for(var j = 0; j <= 7; ++j){
      s[i + j | 0] = x.charCodeAt(7 - j | 0);
    }
    return /* () */0;
  } else {
    for(var j$1 = 0; j$1 <= 7; ++j$1){
      s[i + j$1 | 0] = x.charCodeAt(j$1);
    }
    return /* () */0;
  }
}

function write_untagged_int64(ob, x) {
  return write_untagged_float64(ob, Caml_int64.float_of_bits(x));
}

function safety_test(param) {
  var s = "?\xf0\x06\x05\x04\x03\x02\x01";
  var y = read_untagged_float64(Bi_inbuf.from_string(undefined, undefined, s));
  if (1.00146962706651288 !== y) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "bi_io.ml",
            270,
            4
          ]
        ];
  }
  var ob = Bi_outbuf.create(undefined, undefined, 8);
  write_untagged_float64(ob, 1.00146962706651288);
  if (Bi_outbuf.contents(ob) !== s) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "bi_io.ml",
            274,
            4
          ]
        ];
  } else {
    return 0;
  }
}

function write_untagged_string(ob, s) {
  Bi_vint.write_uvint(ob, s.length);
  return Bi_outbuf.add_string(ob, s);
}

function write_unit(ob, param) {
  Bi_outbuf.add_char(ob, Char.chr(24));
  return Bi_outbuf.add_char(ob, /* "\000" */0);
}

function write_bool(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(0));
  return write_untagged_bool(ob, x);
}

function write_char(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(1));
  return Bi_outbuf.add_char(ob, x);
}

function write_int8(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(1));
  return Bi_outbuf.add_char(ob, Char.chr(x));
}

function write_int16(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(2));
  return write_untagged_int16(ob, x);
}

function write_int32(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(3));
  return write_untagged_int32(ob, x);
}

function write_int64(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(4));
  return write_untagged_float64(ob, Caml_int64.float_of_bits(x));
}

function write_float32(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(11));
  return write_untagged_int32(ob, Caml_float.caml_int32_bits_of_float(x));
}

function write_float64(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(12));
  return write_untagged_float64(ob, x);
}

function write_string(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(18));
  return write_untagged_string(ob, x);
}

function write_uvint(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(16));
  return Bi_vint.write_uvint(ob, x);
}

function write_svint(ob, x) {
  Bi_outbuf.add_char(ob, Char.chr(17));
  return Bi_vint.write_svint(ob, x);
}

function write_t(ob, _tagged, _x) {
  while(true) {
    var x = _x;
    var tagged = _tagged;
    if (typeof x === "number") {
      if (tagged) {
        Bi_outbuf.add_char(ob, Char.chr(24));
      }
      return Bi_outbuf.add_char(ob, /* "\000" */0);
    } else {
      var variant = x[0];
      if (variant >= 708012133) {
        if (variant >= 847309489) {
          if (variant !== 928626971) {
            if (variant >= 951901561) {
              if (variant >= 1063160078) {
                if (tagged) {
                  Bi_outbuf.add_char(ob, Char.chr(16));
                }
                return Bi_vint.write_uvint(ob, x[1]);
              } else {
                var o = x[1];
                if (tagged) {
                  Bi_outbuf.add_char(ob, Char.chr(19));
                }
                if (o !== undefined) {
                  var match = o;
                  var a = match[1];
                  var len = a.length;
                  Bi_vint.write_uvint(ob, len);
                  if (len > 0) {
                    Bi_outbuf.add_char(ob, Char.chr(match[0]));
                    return $$Array.iter((function (param) {
                                  return write_t(ob, false, param);
                                }), a);
                  } else {
                    return 0;
                  }
                } else {
                  return Bi_vint.write_uvint(ob, 0);
                }
              }
            } else if (variant >= 928627642) {
              if (tagged) {
                Bi_outbuf.add_char(ob, Char.chr(12));
              }
              return write_untagged_float64(ob, x[1]);
            } else {
              var a$1 = x[1];
              if (tagged) {
                Bi_outbuf.add_char(ob, Char.chr(21));
              }
              Bi_vint.write_uvint(ob, a$1.length);
              return $$Array.iter((function (param) {
                            var ob$1 = ob;
                            var param$1 = param;
                            write_hashtag(ob$1, param$1[1], true);
                            return write_t(ob$1, true, param$1[2]);
                          }), a$1);
            }
          } else {
            if (tagged) {
              Bi_outbuf.add_char(ob, Char.chr(11));
            }
            return write_untagged_int32(ob, Caml_float.caml_int32_bits_of_float(x[1]));
          }
        } else if (variant >= 737456202) {
          if (variant >= 815034505) {
            if (tagged) {
              Bi_outbuf.add_char(ob, Char.chr(1));
            }
            return Bi_outbuf.add_char(ob, x[1]);
          } else {
            if (tagged) {
              Bi_outbuf.add_char(ob, Char.chr(0));
            }
            return write_untagged_bool(ob, x[1]);
          }
        } else if (variant >= 726928360) {
          var a$2 = x[1];
          if (tagged) {
            Bi_outbuf.add_char(ob, Char.chr(20));
          }
          Bi_vint.write_uvint(ob, a$2.length);
          return $$Array.iter((function (param) {
                        return write_t(ob, true, param);
                      }), a$2);
        } else {
          var match$1 = x[1];
          var x$1 = match$1[2];
          if (tagged) {
            Bi_outbuf.add_char(ob, Char.chr(23));
          }
          write_hashtag(ob, match$1[1], x$1 !== undefined);
          if (x$1 !== undefined) {
            _x = x$1;
            _tagged = true;
            continue ;
          } else {
            return /* () */0;
          }
        }
      } else if (variant >= -775957819) {
        if (variant >= 412180492) {
          if (variant >= 504440814) {
            var o$1 = x[1];
            if (tagged) {
              Bi_outbuf.add_char(ob, Char.chr(25));
            }
            if (o$1 !== undefined) {
              var match$2 = o$1;
              var a$3 = match$2[1];
              var fields = match$2[0];
              var row_num = a$3.length;
              Bi_vint.write_uvint(ob, row_num);
              if (row_num > 0) {
                var col_num = fields.length;
                Bi_vint.write_uvint(ob, col_num);
                $$Array.iter((function (param) {
                        write_hashtag(ob, param[1], true);
                        return Bi_outbuf.add_char(ob, Char.chr(param[2]));
                      }), fields);
                if (row_num > 0) {
                  for(var i = 0 ,i_finish = row_num - 1 | 0; i <= i_finish; ++i){
                    var ai = Caml_array.caml_array_get(a$3, i);
                    if (ai.length !== col_num) {
                      Pervasives.invalid_arg("Bi_io.write_t: Malformed `Table");
                    }
                    for(var j = 0 ,j_finish = col_num - 1 | 0; j <= j_finish; ++j){
                      write_t(ob, false, Caml_array.caml_array_get(ai, j));
                    }
                  }
                  return /* () */0;
                } else {
                  return 0;
                }
              } else {
                return 0;
              }
            } else {
              return Bi_vint.write_uvint(ob, 0);
            }
          } else {
            if (tagged) {
              Bi_outbuf.add_char(ob, Char.chr(17));
            }
            return Bi_vint.write_svint(ob, x[1]);
          }
        } else if (variant >= 221365804) {
          var match$3 = x[1];
          var x$2 = match$3[1];
          if (tagged) {
            Bi_outbuf.add_char(ob, Char.chr(22));
          }
          write_numtag(ob, match$3[0], x$2 !== undefined);
          if (x$2 !== undefined) {
            _x = x$2;
            _tagged = true;
            continue ;
          } else {
            return /* () */0;
          }
        } else {
          var x$3 = x[1];
          if (tagged) {
            Bi_outbuf.add_char(ob, Char.chr(26));
          }
          var offset = Bi_share.Wr.put(ob[/* o_shared */6], /* tuple */[
                x$3,
                Bi_share.dummy_type_id
              ], ob[/* o_offs */3] + ob[/* o_len */2] | 0);
          Bi_vint.write_uvint(ob, offset);
          if (offset === 0) {
            _x = x$3;
            _tagged = true;
            continue ;
          } else {
            return 0;
          }
        }
      } else if (variant >= -783416530) {
        if (variant >= -783415859) {
          if (tagged) {
            Bi_outbuf.add_char(ob, Char.chr(4));
          }
          return write_untagged_float64(ob, Caml_int64.float_of_bits(x[1]));
        } else {
          if (tagged) {
            Bi_outbuf.add_char(ob, Char.chr(3));
          }
          return write_untagged_int32(ob, x[1]);
        }
      } else if (variant >= -783416972) {
        if (tagged) {
          Bi_outbuf.add_char(ob, Char.chr(2));
        }
        return write_untagged_int16(ob, x[1]);
      } else {
        if (tagged) {
          Bi_outbuf.add_char(ob, Char.chr(18));
        }
        return write_untagged_string(ob, x[1]);
      }
    }
  };
}

function write_tree(ob, x) {
  return write_t(ob, true, x);
}

function string_of_tree(x) {
  var ob = Bi_outbuf.create(undefined, undefined, 1000);
  write_tree(ob, x);
  return Bi_outbuf.contents(ob);
}

function tag_of_tree(x) {
  if (typeof x === "number") {
    return 24;
  } else {
    var variant = x[0];
    if (variant >= 708012133) {
      if (variant >= 847309489) {
        if (variant !== 928626971) {
          if (variant >= 951901561) {
            if (variant >= 1063160078) {
              return 16;
            } else {
              return 19;
            }
          } else if (variant >= 928627642) {
            return 12;
          } else {
            return 21;
          }
        } else {
          return 11;
        }
      } else if (variant >= 737456202) {
        if (variant >= 815034505) {
          return 1;
        } else {
          return 0;
        }
      } else if (variant >= 726928360) {
        return 20;
      } else {
        return 23;
      }
    } else if (variant >= -775957819) {
      if (variant >= 412180492) {
        if (variant >= 504440814) {
          return 25;
        } else {
          return 17;
        }
      } else if (variant >= 221365804) {
        return 22;
      } else {
        return 26;
      }
    } else if (variant >= -783416530) {
      if (variant >= -783415859) {
        return 4;
      } else {
        return 3;
      }
    } else if (variant >= -783416972) {
      return 2;
    } else {
      return 18;
    }
  }
}

var read_tag = Bi_inbuf.read_char;

function read_untagged_unit(ib) {
  var match = Bi_inbuf.read_char(ib);
  if (match !== 0) {
    return Bi_util.error("Corrupted data (unit value)");
  } else {
    return /* () */0;
  }
}

function read_untagged_bool(ib) {
  var match = Bi_inbuf.read_char(ib);
  if (match !== 1) {
    if (match !== 0) {
      return Bi_util.error("Corrupted data (bool value)");
    } else {
      return false;
    }
  } else {
    return true;
  }
}

var read_untagged_char = Bi_inbuf.read_char;

var read_untagged_int8 = Bi_inbuf.read_char;

function read_untagged_int16(ib) {
  var i = Bi_inbuf.read(ib, 2);
  var s = ib[/* i_s */0];
  return (Caml_bytes.get(s, i) << 8) | Caml_bytes.get(s, i + 1 | 0);
}

function read_untagged_int32(ib) {
  var i = Bi_inbuf.read(ib, 4);
  var s = ib[/* i_s */0];
  var x1 = (Caml_bytes.get(s, i) << 8) | Caml_bytes.get(s, i + 1 | 0);
  var x2 = (Caml_bytes.get(s, i + 2 | 0) << 8) | Caml_bytes.get(s, i + 3 | 0);
  return (x1 << 16) | x2;
}

function read_untagged_float32(ib) {
  return Caml_float.caml_int32_float_of_bits(read_untagged_int32(ib));
}

function read_untagged_int64(ib) {
  return Caml_int64.bits_of_float(read_untagged_float64(ib));
}

function read_untagged_string(ib) {
  var len = Bi_vint.read_uvint(ib);
  var str = Caml_bytes.caml_create_bytes(len);
  var pos = 0;
  var rem = len;
  while(rem > 0) {
    var bytes_read = Bi_inbuf.try_preread(ib, rem);
    if (bytes_read === 0) {
      Bi_util.error("Corrupted data (string)");
    } else {
      Bytes.blit(ib[/* i_s */0], ib[/* i_pos */1], str, pos, bytes_read);
      ib[/* i_pos */1] = ib[/* i_pos */1] + bytes_read | 0;
      pos = pos + bytes_read | 0;
      rem = rem - bytes_read | 0;
    }
  };
  return Bytes.to_string(str);
}

function read_unit(ib) {
  read_untagged_unit(ib);
  return /* Unit */948106916;
}

function read_bool(ib) {
  return /* `Bool */[
          737456202,
          read_untagged_bool(ib)
        ];
}

function read_int8(ib) {
  return /* `Int8 */[
          815034505,
          Bi_inbuf.read_char(ib)
        ];
}

function read_int16(ib) {
  return /* `Int16 */[
          -783416972,
          read_untagged_int16(ib)
        ];
}

function read_int32(ib) {
  return /* `Int32 */[
          -783416530,
          read_untagged_int32(ib)
        ];
}

function read_int64(ib) {
  return /* `Int64 */[
          -783415859,
          Caml_int64.bits_of_float(read_untagged_float64(ib))
        ];
}

function read_float32(ib) {
  return /* `Float32 */[
          928626971,
          Caml_float.caml_int32_float_of_bits(read_untagged_int32(ib))
        ];
}

function read_float64(ib) {
  return /* `Float64 */[
          928627642,
          read_untagged_float64(ib)
        ];
}

function read_uvint(ib) {
  return /* `Uvint */[
          1063160078,
          Bi_vint.read_uvint(ib)
        ];
}

function read_svint(ib) {
  return /* `Svint */[
          412180492,
          Bi_vint.read_svint(ib)
        ];
}

function read_string(ib) {
  return /* `String */[
          -976970511,
          read_untagged_string(ib)
        ];
}

function read_tree($staropt$star, ib) {
  var unhash = $staropt$star !== undefined ? $staropt$star : make_unhash(/* [] */0);
  var read_array = function (ib) {
    var len = Bi_vint.read_uvint(ib);
    if (len === 0) {
      return /* `Array */[
              951901561,
              undefined
            ];
    } else {
      var tag = Bi_inbuf.read_char(ib);
      var read = reader_of_tag(tag);
      return /* `Array */[
              951901561,
              /* tuple */[
                tag,
                $$Array.init(len, (function (param) {
                        return Curry._1(read, ib);
                      }))
              ]
            ];
    }
  };
  var read_table = function (ib) {
    var row_num = Bi_vint.read_uvint(ib);
    if (row_num === 0) {
      return /* `Table */[
              504440814,
              undefined
            ];
    } else {
      var col_num = Bi_vint.read_uvint(ib);
      var fields = $$Array.init(col_num, (function (param) {
              var h = read_field_hashtag(ib);
              var name = Curry._1(unhash, h);
              var tag = Bi_inbuf.read_char(ib);
              return /* tuple */[
                      name,
                      h,
                      tag
                    ];
            }));
      var readers = $$Array.map((function (param) {
              return reader_of_tag(param[2]);
            }), fields);
      var a = $$Array.init(row_num, (function (param) {
              return $$Array.init(col_num, (function (j) {
                            return Curry._1(Caml_array.caml_array_get(readers, j), ib);
                          }));
            }));
      return /* `Table */[
              504440814,
              /* tuple */[
                fields,
                a
              ]
            ];
    }
  };
  var read_shared = function (ib) {
    var pos = ib[/* i_offs */3] + ib[/* i_pos */1] | 0;
    var offset = Bi_vint.read_uvint(ib);
    if (offset === 0) {
      var r = [];
      Caml_obj.caml_update_dummy(r, /* `Shared */[
            -775957819,
            r
          ]);
      Bi_share.Rd.put(ib[/* i_shared */6], /* tuple */[
            pos,
            Bi_share.dummy_type_id
          ], r);
      var x = reader_of_tag(Bi_inbuf.read_char(ib))(ib);
      r[1] = x;
      return r;
    } else {
      return Bi_share.Rd.get(ib[/* i_shared */6], /* tuple */[
                  pos - offset | 0,
                  Bi_share.dummy_type_id
                ]);
    }
  };
  var read_record = function (ib) {
    var len = Bi_vint.read_uvint(ib);
    return /* `Record */[
            847309489,
            $$Array.init(len, (function (param) {
                    var ib$1 = ib;
                    var h = read_field_hashtag(ib$1);
                    var name = Curry._1(unhash, h);
                    var x = reader_of_tag(Bi_inbuf.read_char(ib$1))(ib$1);
                    return /* tuple */[
                            name,
                            h,
                            x
                          ];
                  }))
          ];
  };
  var read_num_variant = function (ib) {
    return read_numtag(ib, read_num_variant_cont);
  };
  var read_variant = function (ib) {
    return read_hashtag(ib, read_variant_cont);
  };
  var read_tuple = function (ib) {
    var len = Bi_vint.read_uvint(ib);
    return /* `Tuple */[
            726928360,
            $$Array.init(len, (function (param) {
                    return reader_of_tag(Bi_inbuf.read_char(ib))(ib);
                  }))
          ];
  };
  var read_num_variant_cont = function (ib, i, has_arg) {
    var x = has_arg ? reader_of_tag(Bi_inbuf.read_char(ib))(ib) : undefined;
    return /* `Num_variant */[
            221365804,
            /* tuple */[
              i,
              x
            ]
          ];
  };
  var reader_of_tag = function (param) {
    switch (param) {
      case 0 :
          return read_bool;
      case 1 :
          return read_int8;
      case 2 :
          return read_int16;
      case 3 :
          return read_int32;
      case 4 :
          return read_int64;
      case 11 :
          return read_float32;
      case 12 :
          return read_float64;
      case 5 :
      case 6 :
      case 7 :
      case 8 :
      case 9 :
      case 10 :
      case 13 :
      case 14 :
      case 15 :
          return Bi_util.error("Corrupted data (invalid tag)");
      case 16 :
          return read_uvint;
      case 17 :
          return read_svint;
      case 18 :
          return read_string;
      case 19 :
          return read_array;
      case 20 :
          return read_tuple;
      case 21 :
          return read_record;
      case 22 :
          return read_num_variant;
      case 23 :
          return read_variant;
      case 24 :
          return read_unit;
      case 25 :
          return read_table;
      case 26 :
          return read_shared;
      default:
        return Bi_util.error("Corrupted data (invalid tag)");
    }
  };
  var read_variant_cont = function (ib, h, has_arg) {
    var name = Curry._1(unhash, h);
    var x = has_arg ? reader_of_tag(Bi_inbuf.read_char(ib))(ib) : undefined;
    return /* `Variant */[
            708012133,
            /* tuple */[
              name,
              h,
              x
            ]
          ];
  };
  return reader_of_tag(Bi_inbuf.read_char(ib))(ib);
}

function tree_of_string(unhash, s) {
  return read_tree(unhash, Bi_inbuf.from_string(undefined, undefined, s));
}

function skip_unit(ib) {
  Bi_inbuf.read(ib, 1);
  return /* () */0;
}

function skip_bool(ib) {
  Bi_inbuf.read(ib, 1);
  return /* () */0;
}

function skip_int8(ib) {
  Bi_inbuf.read(ib, 1);
  return /* () */0;
}

function skip_int16(ib) {
  Bi_inbuf.read(ib, 2);
  return /* () */0;
}

function skip_int32(ib) {
  Bi_inbuf.read(ib, 4);
  return /* () */0;
}

function skip_int64(ib) {
  Bi_inbuf.read(ib, 8);
  return /* () */0;
}

function skip_float32(ib) {
  Bi_inbuf.read(ib, 4);
  return /* () */0;
}

function skip_float64(ib) {
  Bi_inbuf.read(ib, 8);
  return /* () */0;
}

function skip_uvint(ib) {
  Bi_vint.read_uvint(ib);
  return /* () */0;
}

function skip_svint(ib) {
  Bi_vint.read_svint(ib);
  return /* () */0;
}

function skip_string(ib) {
  var len = Bi_vint.read_uvint(ib);
  Bi_inbuf.read(ib, len);
  return /* () */0;
}

function skip_array(ib) {
  var len = Bi_vint.read_uvint(ib);
  if (len === 0) {
    return /* () */0;
  } else {
    var tag = Bi_inbuf.read_char(ib);
    var read = skipper_of_tag(tag);
    for(var i = 1; i <= len; ++i){
      Curry._1(read, ib);
    }
    return /* () */0;
  }
}

function skip_tuple(ib) {
  var len = Bi_vint.read_uvint(ib);
  for(var i = 1; i <= len; ++i){
    skip(ib);
  }
  return /* () */0;
}

function skip_field(ib) {
  read_field_hashtag(ib);
  return skip(ib);
}

function skip_record(ib) {
  var len = Bi_vint.read_uvint(ib);
  for(var i = 1; i <= len; ++i){
    skip_field(ib);
  }
  return /* () */0;
}

function skip_num_variant_cont(ib, i, has_arg) {
  if (has_arg) {
    return skip(ib);
  } else {
    return 0;
  }
}

function skip_num_variant(ib) {
  return read_numtag(ib, skip_num_variant_cont);
}

function skip_variant_cont(ib, h, has_arg) {
  if (has_arg) {
    return skip(ib);
  } else {
    return 0;
  }
}

function skip_variant(ib) {
  return read_hashtag(ib, skip_variant_cont);
}

function skip_table(ib) {
  var row_num = Bi_vint.read_uvint(ib);
  if (row_num === 0) {
    return /* () */0;
  } else {
    var col_num = Bi_vint.read_uvint(ib);
    var readers = $$Array.init(col_num, (function (param) {
            read_field_hashtag(ib);
            return skipper_of_tag(Bi_inbuf.read_char(ib));
          }));
    for(var i = 1; i <= row_num; ++i){
      for(var j = 1; j <= col_num; ++j){
        Curry._1(Caml_array.caml_array_get(readers, j), ib);
      }
    }
    return /* () */0;
  }
}

function skipper_of_tag(param) {
  switch (param) {
    case 0 :
        return skip_bool;
    case 1 :
        return skip_int8;
    case 2 :
        return skip_int16;
    case 3 :
        return skip_int32;
    case 4 :
        return skip_int64;
    case 11 :
        return skip_float32;
    case 12 :
        return skip_float64;
    case 5 :
    case 6 :
    case 7 :
    case 8 :
    case 9 :
    case 10 :
    case 13 :
    case 14 :
    case 15 :
        return Bi_util.error("Corrupted data (invalid tag)");
    case 16 :
        return skip_uvint;
    case 17 :
        return skip_svint;
    case 18 :
        return skip_string;
    case 19 :
        return skip_array;
    case 20 :
        return skip_tuple;
    case 21 :
        return skip_record;
    case 22 :
        return skip_num_variant;
    case 23 :
        return skip_variant;
    case 24 :
        return skip_unit;
    case 25 :
        return skip_table;
    default:
      return Bi_util.error("Corrupted data (invalid tag)");
  }
}

function skip(ib) {
  return skipper_of_tag(Bi_inbuf.read_char(ib))(ib);
}

function array_map(f, a) {
  var len = a.length;
  if (len === 0) {
    return /* array */[];
  } else {
    var r = Caml_array.caml_make_vect(len, Curry._1(f, a[0]));
    for(var i = 1 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      r[i] = Curry._1(f, a[i]);
    }
    return r;
  }
}

var tuple_001 = /* space_after_separator */Easy_format.list[/* space_after_separator */1];

var tuple_002 = /* space_before_separator */Easy_format.list[/* space_before_separator */2];

var tuple_003 = /* separators_stick_left */Easy_format.list[/* separators_stick_left */3];

var tuple_005 = /* stick_to_label */Easy_format.list[/* stick_to_label */5];

var tuple_007 = /* wrap_body */Easy_format.list[/* wrap_body */7];

var tuple_008 = /* indent_body */Easy_format.list[/* indent_body */8];

var tuple_009 = /* list_style */Easy_format.list[/* list_style */9];

var tuple_010 = /* opening_style */Easy_format.list[/* opening_style */10];

var tuple_011 = /* body_style */Easy_format.list[/* body_style */11];

var tuple_012 = /* separator_style */Easy_format.list[/* separator_style */12];

var tuple_013 = /* closing_style */Easy_format.list[/* closing_style */13];

var tuple = /* record */[
  /* space_after_opening */false,
  tuple_001,
  tuple_002,
  tuple_003,
  /* space_before_closing */false,
  tuple_005,
  /* align_closing */false,
  tuple_007,
  tuple_008,
  tuple_009,
  tuple_010,
  tuple_011,
  tuple_012,
  tuple_013
];

function format(shared, _x) {
  while(true) {
    var x = _x;
    if (typeof x === "number") {
      return /* Atom */Block.__(0, [
                "unit",
                Easy_format.atom
              ]);
    } else {
      var variant = x[0];
      if (variant >= 708012133) {
        if (variant >= 847309489) {
          if (variant >= 951901561) {
            if (variant >= 1063160078) {
              return /* Atom */Block.__(0, [
                        String(x[1]),
                        Easy_format.atom
                      ]);
            } else {
              var match = x[1];
              if (match !== undefined) {
                var f = function (param) {
                  return format(shared, param);
                };
                return /* List */Block.__(1, [
                          /* tuple */[
                            "[",
                            ",",
                            "]",
                            Easy_format.list
                          ],
                          $$Array.to_list(array_map(f, match[1]))
                        ]);
              } else {
                return /* Atom */Block.__(0, [
                          "[]",
                          Easy_format.atom
                        ]);
              }
            }
          } else if (variant >= 928626971) {
            return /* Atom */Block.__(0, [
                      Pervasives.string_of_float(x[1]),
                      Easy_format.atom
                    ]);
          } else {
            var f$1 = function (param) {
              var shared$1 = shared;
              var param$1 = param;
              var o = param$1[0];
              var s = o !== undefined ? Curry._1(Printf.sprintf(/* Format */[
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ]),
                          "%S"
                        ]), o) : Curry._1(Printf.sprintf(/* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "#" */35,
                              /* Int32 */Block.__(5, [
                                  /* Int_x */6,
                                  /* Lit_padding */Block.__(0, [
                                      /* Zeros */2,
                                      8
                                    ]),
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "#%08lx"
                        ]), param$1[1]);
              return /* Label */Block.__(2, [
                        /* tuple */[
                          /* Atom */Block.__(0, [
                              Curry._1(Printf.sprintf(/* Format */[
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* End_of_format */0
                                              ])
                                          ]),
                                        "%s:"
                                      ]), s),
                              Easy_format.atom
                            ]),
                          Easy_format.label
                        ],
                        format(shared$1, param$1[2])
                      ]);
            };
            return /* List */Block.__(1, [
                      /* tuple */[
                        "{",
                        ",",
                        "}",
                        Easy_format.list
                      ],
                      $$Array.to_list(array_map(f$1, x[1]))
                    ]);
          }
        } else if (variant >= 737456202) {
          if (variant >= 815034505) {
            return /* Atom */Block.__(0, [
                      Curry._1(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "0x",
                                    /* Int */Block.__(4, [
                                        /* Int_x */6,
                                        /* Lit_padding */Block.__(0, [
                                            /* Zeros */2,
                                            2
                                          ]),
                                        /* No_precision */0,
                                        /* End_of_format */0
                                      ])
                                  ]),
                                "0x%02x"
                              ]), x[1]),
                      Easy_format.atom
                    ]);
          } else {
            return /* Atom */Block.__(0, [
                      x[1] ? "true" : "false",
                      Easy_format.atom
                    ]);
          }
        } else if (variant >= 726928360) {
          var f$2 = function (param) {
            return format(shared, param);
          };
          return /* List */Block.__(1, [
                    /* tuple */[
                      "(",
                      ",",
                      ")",
                      tuple
                    ],
                    $$Array.to_list(array_map(f$2, x[1]))
                  ]);
        } else {
          var match$1 = x[1];
          var o = match$1[2];
          var opt_name = match$1[0];
          var name = opt_name !== undefined ? Curry._1(Printf.sprintf(/* Format */[
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ]),
                      "%S"
                    ]), opt_name) : Curry._1(Printf.sprintf(/* Format */[
                      /* Char_literal */Block.__(12, [
                          /* "#" */35,
                          /* Int32 */Block.__(5, [
                              /* Int_x */6,
                              /* Lit_padding */Block.__(0, [
                                  /* Zeros */2,
                                  8
                                ]),
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "#%08lx"
                    ]), match$1[1]);
          if (o !== undefined) {
            return /* List */Block.__(1, [
                      /* tuple */[
                        "<",
                        "",
                        ">",
                        tuple
                      ],
                      /* :: */[
                        /* Label */Block.__(2, [
                            /* tuple */[
                              /* Atom */Block.__(0, [
                                  name + ":",
                                  Easy_format.atom
                                ]),
                              Easy_format.label
                            ],
                            format(shared, o)
                          ]),
                        /* [] */0
                      ]
                    ]);
          } else {
            return /* Atom */Block.__(0, [
                      "<" + (name + ">"),
                      Easy_format.atom
                    ]);
          }
        }
      } else if (variant >= -775957819) {
        if (variant >= 412180492) {
          if (variant >= 504440814) {
            var match$2 = x[1];
            if (match$2 !== undefined) {
              var match$3 = match$2;
              var header = match$3[0];
              var record_array_001 = /* tuple */[
                21,
                $$Array.map((function(header){
                    return function (a) {
                      return /* `Record */[
                              847309489,
                              $$Array.mapi((function (i, x) {
                                      var match = Caml_array.caml_array_get(header, i);
                                      return /* tuple */[
                                              match[0],
                                              match[1],
                                              x
                                            ];
                                    }), a)
                            ];
                    }
                    }(header)), match$3[1])
              ];
              var record_array = /* `Array */[
                951901561,
                record_array_001
              ];
              _x = record_array;
              continue ;
            } else {
              return /* Atom */Block.__(0, [
                        "[]",
                        Easy_format.atom
                      ]);
            }
          } else {
            return /* Atom */Block.__(0, [
                      String(x[1]),
                      Easy_format.atom
                    ]);
          }
        } else if (variant >= 221365804) {
          var match$4 = x[1];
          var o$1 = match$4[1];
          var i = match$4[0];
          var suffix = i === 0 ? "" : String(i);
          if (o$1 !== undefined) {
            var cons_000 = "Some" + suffix;
            var cons = /* Atom */Block.__(0, [
                cons_000,
                Easy_format.atom
              ]);
            return /* Label */Block.__(2, [
                      /* tuple */[
                        cons,
                        Easy_format.label
                      ],
                      format(shared, o$1)
                    ]);
          } else {
            return /* Atom */Block.__(0, [
                      "None" + suffix,
                      Easy_format.atom
                    ]);
          }
        } else {
          var p = shared[1];
          var x$1 = x[1];
          p[0] = p[0] + 1 | 0;
          var pos = p[0];
          var offset = Bi_share.Wr.put(shared[0], /* tuple */[
                x$1,
                Bi_share.dummy_type_id
              ], pos);
          if (offset === 0) {
            return /* Label */Block.__(2, [
                      /* tuple */[
                        /* Atom */Block.__(0, [
                            Curry._1(Printf.sprintf(/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "shared",
                                          /* Int */Block.__(4, [
                                              /* Int_i */3,
                                              /* No_padding */0,
                                              /* No_precision */0,
                                              /* String_literal */Block.__(11, [
                                                  " ->",
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ]),
                                      "shared%i ->"
                                    ]), pos),
                            Easy_format.atom
                          ]),
                        Easy_format.label
                      ],
                      format(shared, x$1)
                    ]);
          } else {
            return /* Atom */Block.__(0, [
                      Curry._1(Printf.sprintf(/* Format */[
                                /* String_literal */Block.__(11, [
                                    "shared",
                                    /* Int */Block.__(4, [
                                        /* Int_i */3,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* End_of_format */0
                                      ])
                                  ]),
                                "shared%i"
                              ]), pos - offset | 0),
                      Easy_format.atom
                    ]);
          }
        }
      } else if (variant >= -783416530) {
        if (variant >= -783415859) {
          return /* Atom */Block.__(0, [
                    Curry._1(Printf.sprintf(/* Format */[
                              /* String_literal */Block.__(11, [
                                  "0x",
                                  /* Int64 */Block.__(7, [
                                      /* Int_x */6,
                                      /* Lit_padding */Block.__(0, [
                                          /* Zeros */2,
                                          16
                                        ]),
                                      /* No_precision */0,
                                      /* End_of_format */0
                                    ])
                                ]),
                              "0x%016Lx"
                            ]), x[1]),
                    Easy_format.atom
                  ]);
        } else {
          return /* Atom */Block.__(0, [
                    Curry._1(Printf.sprintf(/* Format */[
                              /* String_literal */Block.__(11, [
                                  "0x",
                                  /* Int32 */Block.__(5, [
                                      /* Int_x */6,
                                      /* Lit_padding */Block.__(0, [
                                          /* Zeros */2,
                                          8
                                        ]),
                                      /* No_precision */0,
                                      /* End_of_format */0
                                    ])
                                ]),
                              "0x%08lx"
                            ]), x[1]),
                    Easy_format.atom
                  ]);
        }
      } else if (variant >= -783416972) {
        return /* Atom */Block.__(0, [
                  Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "0x",
                                /* Int */Block.__(4, [
                                    /* Int_x */6,
                                    /* Lit_padding */Block.__(0, [
                                        /* Zeros */2,
                                        4
                                      ]),
                                    /* No_precision */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "0x%04x"
                          ]), x[1]),
                  Easy_format.atom
                ]);
      } else {
        return /* Atom */Block.__(0, [
                  Curry._1(Printf.sprintf(/* Format */[
                            /* Caml_string */Block.__(3, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ]),
                            "%S"
                          ]), x[1]),
                  Easy_format.atom
                ]);
      }
    }
  };
}

function init(param) {
  return /* tuple */[
          Curry._1(Bi_share.Wr.create, 512),
          /* record */[/* contents */0]
        ];
}

function view_of_tree(t) {
  return Easy_format.Pretty.to_string(undefined, undefined, format(init(/* () */0), t));
}

function print_view_of_tree(t) {
  return Easy_format.Pretty.to_stdout(undefined, undefined, format(init(/* () */0), t));
}

function output_view_of_tree(oc, t) {
  return Easy_format.Pretty.to_channel(undefined, undefined, oc, format(init(/* () */0), t));
}

function view(unhash, s) {
  return view_of_tree(tree_of_string(unhash, s));
}

function print_view(unhash, s) {
  return print_view_of_tree(tree_of_string(unhash, s));
}

function output_view(unhash, oc, s) {
  return output_view_of_tree(oc, tree_of_string(unhash, s));
}

var bool_tag = 0;

var int8_tag = 1;

var int16_tag = 2;

var int32_tag = 3;

var int64_tag = 4;

var float32_tag = 11;

var float64_tag = 12;

var uvint_tag = 16;

var svint_tag = 17;

var string_tag = 18;

var array_tag = 19;

var tuple_tag = 20;

var record_tag = 21;

var num_variant_tag = 22;

var variant_tag = 23;

var unit_tag = 24;

var table_tag = 25;

var shared_tag = 26;

var write_untagged_uvint = Bi_vint.write_uvint;

var write_untagged_svint = Bi_vint.write_svint;

var read_untagged_uvint = Bi_vint.read_uvint;

var read_untagged_svint = Bi_vint.read_svint;

exports.bool_tag = bool_tag;
exports.int8_tag = int8_tag;
exports.int16_tag = int16_tag;
exports.int32_tag = int32_tag;
exports.int64_tag = int64_tag;
exports.float32_tag = float32_tag;
exports.float64_tag = float64_tag;
exports.uvint_tag = uvint_tag;
exports.svint_tag = svint_tag;
exports.string_tag = string_tag;
exports.array_tag = array_tag;
exports.tuple_tag = tuple_tag;
exports.record_tag = record_tag;
exports.num_variant_tag = num_variant_tag;
exports.variant_tag = variant_tag;
exports.unit_tag = unit_tag;
exports.table_tag = table_tag;
exports.shared_tag = shared_tag;
exports.write_tag = write_tag;
exports.read_tag = read_tag;
exports.hash_name = hash_name;
exports.write_hashtag = write_hashtag;
exports.string_of_hashtag = string_of_hashtag;
exports.read_hashtag = read_hashtag;
exports.read_field_hashtag = read_field_hashtag;
exports.make_unhash = make_unhash;
exports.write_numtag = write_numtag;
exports.read_numtag = read_numtag;
exports.write_untagged_unit = write_untagged_unit;
exports.write_untagged_bool = write_untagged_bool;
exports.write_untagged_char = write_untagged_char;
exports.write_untagged_int8 = write_untagged_int8;
exports.write_untagged_int16 = write_untagged_int16;
exports.write_untagged_int32 = write_untagged_int32;
exports.write_untagged_int64 = write_untagged_int64;
exports.write_untagged_float32 = write_untagged_float32;
exports.write_untagged_float64 = write_untagged_float64;
exports.write_untagged_string = write_untagged_string;
exports.write_untagged_uvint = write_untagged_uvint;
exports.write_untagged_svint = write_untagged_svint;
exports.write_unit = write_unit;
exports.write_bool = write_bool;
exports.write_char = write_char;
exports.write_int8 = write_int8;
exports.write_int16 = write_int16;
exports.write_int32 = write_int32;
exports.write_int64 = write_int64;
exports.write_float32 = write_float32;
exports.write_float64 = write_float64;
exports.write_string = write_string;
exports.write_uvint = write_uvint;
exports.write_svint = write_svint;
exports.read_untagged_unit = read_untagged_unit;
exports.read_untagged_bool = read_untagged_bool;
exports.read_untagged_char = read_untagged_char;
exports.read_untagged_int8 = read_untagged_int8;
exports.read_untagged_int16 = read_untagged_int16;
exports.read_untagged_int32 = read_untagged_int32;
exports.read_untagged_int64 = read_untagged_int64;
exports.read_untagged_float32 = read_untagged_float32;
exports.read_untagged_float64 = read_untagged_float64;
exports.read_untagged_string = read_untagged_string;
exports.read_untagged_uvint = read_untagged_uvint;
exports.read_untagged_svint = read_untagged_svint;
exports.skip = skip;
exports.write_tree = write_tree;
exports.string_of_tree = string_of_tree;
exports.read_tree = read_tree;
exports.tree_of_string = tree_of_string;
exports.tag_of_tree = tag_of_tree;
exports.view_of_tree = view_of_tree;
exports.view = view;
exports.print_view_of_tree = print_view_of_tree;
exports.print_view = print_view;
exports.output_view_of_tree = output_view_of_tree;
exports.output_view = output_view;
exports.safety_test = safety_test;
/*  Not a pure module */
