// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Stream = require("bs-platform/lib/js/stream.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function input_int64(ic) {
  if (Sys.word_size !== 32) {
    if (Sys.word_size !== 64) {
      var s = Curry._1(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "unsupported word size (",
                    /* Int */Block.__(4, [
                        /* Int_i */3,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* ")" */41,
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "unsupported word size (%i)"
              ]), Sys.word_size);
      return Pervasives.failwith("Bi_stream: " + s);
    } else {
      var n = 0;
      for(var i = 1; i <= 8; ++i){
        n = (n << 8) | Pervasives.input_byte(ic);
      }
      if (n < 0) {
        Pervasives.failwith("Bi_stream: Corrupted stream: excessive chunk length");
      }
      return n;
    }
  } else {
    for(var i$1 = 1; i$1 <= 4; ++i$1){
      if (Pervasives.input_byte(ic) !== 0) {
        Pervasives.failwith("Bi_stream: Chunk length exceeds supported range on this platform");
      }
      
    }
    var n$1 = 0;
    for(var i$2 = 1; i$2 <= 4; ++i$2){
      n$1 = (n$1 << 8) | Pervasives.input_byte(ic);
    }
    if (n$1 < 0) {
      Pervasives.failwith("Bi_stream: Chunk length exceeds supported range on this platform");
    }
    return n$1;
  }
}

function output_int64(oc, n) {
  if (Sys.word_size !== 32) {
    if (Sys.word_size !== 64) {
      var s = Curry._1(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "unsupported word size (",
                    /* Int */Block.__(4, [
                        /* Int_i */3,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Char_literal */Block.__(12, [
                            /* ")" */41,
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "unsupported word size (%i)"
              ]), Sys.word_size);
      return Pervasives.failwith("Bi_stream: " + s);
    } else {
      var n$1 = n;
      for(var i = 1; i <= 8; ++i){
        Pervasives.output_char(oc, Pervasives.char_of_int((n$1 >>> 56)));
        n$1 = (n$1 << 8);
      }
      return /* () */0;
    }
  } else {
    Pervasives.output_string(oc, "\0\0\0\0");
    var n$2 = n;
    for(var i$1 = 1; i$1 <= 4; ++i$1){
      Pervasives.output_char(oc, Pervasives.char_of_int((n$2 >>> 24)));
      n$2 = (n$2 << 8);
    }
    return /* () */0;
  }
}

function read_chunk(of_string, ic) {
  var c = Pervasives.input_char(ic);
  if (c !== 1) {
    if (c !== 0) {
      var s = Curry._1(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "Corrupted stream: ",
                    /* Caml_char */Block.__(1, [/* End_of_format */0])
                  ]),
                "Corrupted stream: %C"
              ]), c);
      return Pervasives.failwith("Bi_stream: " + s);
    } else {
      return ;
    }
  } else {
    var len = input_int64(ic);
    if (len > Sys.max_string_length) {
      var s$1 = Curry._1(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "Corrupted stream: excessive chunk length (",
                    /* Int */Block.__(4, [
                        /* Int_i */3,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            " bytes)",
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "Corrupted stream: excessive chunk length (%i bytes)"
              ]), len);
      Pervasives.failwith("Bi_stream: " + s$1);
    }
    var s$2 = Caml_bytes.caml_create_bytes(len);
    Pervasives.really_input(ic, s$2, 0, len);
    return Caml_option.some(Curry._1(of_string, Bytes.to_string(s$2)));
  }
}

function read_stream(of_string, ic) {
  var st = Stream.from((function (i) {
          return read_chunk(of_string, ic);
        }));
  var a = /* record */[/* contents : array */[]];
  var pos = /* record */[/* contents */0];
  var next = function (i) {
    while(true) {
      if (pos[0] >= a[0].length) {
        var match = Stream.peek(st);
        if (match !== undefined) {
          Stream.junk(st);
          a[0] = match;
          pos[0] = 0;
          continue ;
        } else {
          return ;
        }
      } else {
        var x = Caml_array.caml_array_get(a[0], pos[0]);
        pos[0] = pos[0] + 1 | 0;
        return Caml_option.some(x);
      }
    };
  };
  return Stream.from(next);
}

function rev_array_of_list(l) {
  if (l) {
    var r = l[1];
    var len = List.length(l);
    var a = Caml_array.caml_make_vect(len, l[0]);
    for(var i = len - 2 | 0; i >= 0; --i){
      var match = r;
      if (match) {
        Caml_array.caml_array_set(a, i, match[0]);
        r = match[1];
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "bi_stream.ml",
                102,
                20
              ]
            ];
      }
    }
    return a;
  } else {
    return /* array */[];
  }
}

function write_stream($staropt$star, to_string, oc, st) {
  var chunk_len = $staropt$star !== undefined ? $staropt$star : 1024;
  var n = /* record */[/* contents */0];
  var acc = /* record */[/* contents : [] */0];
  var flush_chunk = function (param) {
    var a = rev_array_of_list(acc[0]);
    acc[0] = /* [] */0;
    n[0] = 0;
    var s = Curry._1(to_string, a);
    Pervasives.output_char(oc, /* "\001" */1);
    output_int64(oc, s.length);
    return Pervasives.output_string(oc, s);
  };
  Stream.iter((function (x) {
          n[0] = n[0] + 1 | 0;
          acc[0] = /* :: */[
            x,
            acc[0]
          ];
          if (n[0] >= chunk_len) {
            return flush_chunk(/* () */0);
          } else {
            return 0;
          }
        }), st);
  if (n[0] > 0) {
    flush_chunk(/* () */0);
  }
  return Pervasives.output_char(oc, /* "\000" */0);
}

function test(l) {
  List.iter((function (x) {
          if (x >= 0 && x <= 9) {
            return 0;
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "bi_stream.ml",
                    131,
                    22
                  ]
                ];
          }
        }), l);
  var to_string = function (a) {
    return $$String.concat("", List.map((function (prim) {
                      return String(prim);
                    }), $$Array.to_list(a)));
  };
  var of_string = function (s) {
    return $$Array.init(s.length, (function (i) {
                  return Caml_format.caml_int_of_string($$String.make(1, Caml_string.get(s, i)));
                }));
  };
  var st = Stream.of_list(l);
  var oc = Pervasives.open_out("test-stream.dat");
  write_stream(2, to_string, oc, st);
  Pervasives.close_out(oc);
  var ic = Pervasives.open_in("test-stream.dat");
  var st$prime = read_stream(of_string, ic);
  var l$prime = /* record */[/* contents : [] */0];
  Stream.iter((function (i) {
          l$prime[0] = /* :: */[
            i,
            l$prime[0]
          ];
          return /* () */0;
        }), st$prime);
  Pervasives.close_in(ic);
  return Caml_obj.caml_equal(l, List.rev(l$prime[0]));
}

exports.read_stream = read_stream;
exports.write_stream = write_stream;
exports.test = test;
/* No side effect */
