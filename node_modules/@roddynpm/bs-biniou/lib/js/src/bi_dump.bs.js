// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Buffer = require("bs-platform/lib/js/buffer.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Printexc = require("bs-platform/lib/js/printexc.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_external_polyfill = require("bs-platform/lib/js/caml_external_polyfill.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function split(s) {
  var acc = /* [] */0;
  var stop = s.length;
  for(var i = stop - 1 | 0; i >= 0; --i){
    if (Caml_string.get(s, i) === /* "," */44) {
      var start = i + 1 | 0;
      acc = /* :: */[
        $$String.sub(s, start, stop - start | 0),
        acc
      ];
      stop = i;
    }
    
  }
  return /* :: */[
          $$String.sub(s, 0, stop),
          acc
        ];
}

function load_lines(accu, s) {
  var ic = Pervasives.open_in(s);
  var l = accu;
  try {
    while(true) {
      l = /* :: */[
        Pervasives.input_line(ic),
        List.rev(l)
      ];
    };
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.end_of_file) {
      Pervasives.close_in(ic);
    } else {
      throw exn;
    }
  }
  return l;
}

function load(ic) {
  var buf = $$Buffer.create(1000);
  try {
    while(true) {
      $$Buffer.add_char(buf, Pervasives.input_char(ic));
    };
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "bi_dump.ml",
            38,
            4
          ]
        ];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.end_of_file) {
      return $$Buffer.contents(buf);
    } else {
      throw exn;
    }
  }
}

function default_dict_path(param) {
  try {
    return Filename.concat(Caml_sys.caml_sys_getenv("HOME"), ".bdump-dict");
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return ;
    } else {
      throw exn;
    }
  }
}

function load_dictionary(dic_file, accu) {
  if (dic_file !== undefined) {
    var fn = dic_file;
    if (Caml_external_polyfill.resolve("caml_sys_file_exists")(fn)) {
      try {
        return load_lines(accu, fn);
      }
      catch (raw_e){
        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
        return Pervasives.failwith(Curry._2(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "Cannot load dictionary from ",
                                /* Caml_string */Block.__(3, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        ": ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char_literal */Block.__(12, [
                                                /* "\n" */10,
                                                /* Flush */Block.__(10, [/* End_of_format */0])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "Cannot load dictionary from %S: %s\n%!"
                          ]), fn, Printexc.to_string(e)));
      }
    } else {
      return accu;
    }
  } else {
    return accu;
  }
}

function write_uniq(oc, a) {
  if (a.length !== 0) {
    Curry._1(Printf.fprintf(oc, /* Format */[
              /* String */Block.__(2, [
                  /* No_padding */0,
                  /* Char_literal */Block.__(12, [
                      /* "\n" */10,
                      /* End_of_format */0
                    ])
                ]),
              "%s\n"
            ]), Caml_array.caml_array_get(a, 0));
    $$Array.fold_left((function (last, x) {
            if (last !== x) {
              Curry._1(Printf.fprintf(oc, /* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])
                          ]),
                        "%s\n"
                      ]), x);
            }
            return x;
          }), Caml_array.caml_array_get(a, 0), a);
    return /* () */0;
  } else {
    return 0;
  }
}

function save_dictionary(dic_file, l) {
  if (dic_file !== undefined) {
    var a = $$Array.of_list(l);
    $$Array.sort($$String.compare, a);
    var oc = Pervasives.open_out(dic_file);
    try {
      write_uniq(oc, a);
      return Pervasives.close_out_noerr(oc);
    }
    catch (e){
      Pervasives.close_out_noerr(oc);
      throw e;
    }
  } else {
    return /* () */0;
  }
}

var $slash$slash = Filename.concat;

exports.split = split;
exports.load_lines = load_lines;
exports.load = load;
exports.$slash$slash = $slash$slash;
exports.default_dict_path = default_dict_path;
exports.load_dictionary = load_dictionary;
exports.write_uniq = write_uniq;
exports.save_dictionary = save_dictionary;
/* Filename Not a pure module */
