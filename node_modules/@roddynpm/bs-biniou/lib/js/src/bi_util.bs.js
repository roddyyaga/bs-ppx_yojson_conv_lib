// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var $$Error = Caml_exceptions.create("Bi_util.Error");

function error(s) {
  throw [
        $$Error,
        s
      ];
}

function string8_of_int(x) {
  var s = Caml_bytes.caml_create_bytes(8);
  for(var i = 0; i <= 7; ++i){
    s[7 - i | 0] = Char.chr(255 & ((x >>> (i << 3)) | 0));
  }
  return Bytes.to_string(s);
}

function string4_of_int(x) {
  var s = [
    0,
    0,
    0,
    0
  ];
  for(var i = 0; i <= 3; ++i){
    s[3 - i | 0] = Char.chr(255 & ((x >>> (i << 3)) | 0));
  }
  return Bytes.to_string(s);
}

function print_bits($staropt$star, len, s) {
  var pos = $staropt$star !== undefined ? $staropt$star : 0;
  var slen = s.length;
  if (pos < 0 || pos > 0 && pos >= slen) {
    Pervasives.invalid_arg("Bi_util.print_bits");
  }
  var len$1;
  if (len !== undefined) {
    var len$2 = len;
    len$1 = len$2 > (slen - pos | 0) ? Pervasives.invalid_arg("Bi_util.print_bits") : len$2;
  } else {
    len$1 = slen - pos | 0;
  }
  var r = Caml_bytes.caml_create_bytes(Caml_int32.imul(len$1, 9));
  for(var i = 0 ,i_finish = len$1 - 1 | 0; i <= i_finish; ++i){
    var k = Caml_int32.imul(i, 9);
    var x = Caml_string.get(s, pos + i | 0);
    for(var j = 0; j <= 7; ++j){
      r[k + j | 0] = ((x >>> (7 - j | 0)) & 1) === 0 ? /* "0" */48 : /* "1" */49;
    }
    r[k + 8 | 0] = (i + 1 | 0) % 8 === 0 ? /* "\n" */10 : /* " " */32;
  }
  return Bytes.to_string(r);
}

var c = 0;

var r = -1;

while(r !== 0) {
  r = (r >>> 1);
  c = c + 1 | 0;
};

var int_size = c;

exports.$$Error = $$Error;
exports.error = error;
exports.string8_of_int = string8_of_int;
exports.string4_of_int = string4_of_int;
exports.print_bits = print_bits;
exports.int_size = int_size;
/*  Not a pure module */
