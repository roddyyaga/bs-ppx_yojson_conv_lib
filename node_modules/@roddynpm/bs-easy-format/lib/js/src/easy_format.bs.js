// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Buffer = require("bs-platform/lib/js/buffer.js");
var Format = require("bs-platform/lib/js/format.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function rev_split(l) {
  var _xs = /* [] */0;
  var _ys = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var ys = _ys;
    var xs = _xs;
    if (param) {
      var match = param[0];
      _param = param[1];
      _ys = /* :: */[
        match[1],
        ys
      ];
      _xs = /* :: */[
        match[0],
        xs
      ];
      continue ;
    } else {
      return /* tuple */[
              xs,
              ys
            ];
    }
  };
}

function propagate_from_leaf_to_root(init_acc, merge_acc, map_node, x) {
  var aux = function (x) {
    switch (x.tag | 0) {
      case /* List */1 :
          var match = rev_split(List.rev_map(aux, x[1]));
          var acc = List.fold_left(merge_acc, Curry._1(init_acc, x), match[1]);
          return Curry._2(map_node, /* List */Block.__(1, [
                        x[0],
                        match[0]
                      ]), acc);
      case /* Label */2 :
          var match$1 = x[0];
          var acc0 = Curry._1(init_acc, x);
          var match$2 = aux(match$1[0]);
          var match$3 = aux(x[1]);
          var acc$1 = Curry._2(merge_acc, Curry._2(merge_acc, acc0, match$2[1]), match$3[1]);
          return Curry._2(map_node, /* Label */Block.__(2, [
                        /* tuple */[
                          match$2[0],
                          match$1[1]
                        ],
                        match$3[0]
                      ]), acc$1);
      case /* Atom */0 :
      case /* Custom */3 :
          break;
      
    }
    var acc$2 = Curry._1(init_acc, x);
    return Curry._2(map_node, x, acc$2);
  };
  return aux(x);
}

function propagate_forced_breaks(x) {
  var init_acc = function (param) {
    switch (param.tag | 0) {
      case /* List */1 :
          return param[0][3][/* wrap_body */7] === 451368025;
      case /* Label */2 :
          return param[0][1][/* label_break */0] === 3884224;
      case /* Atom */0 :
      case /* Custom */3 :
          return false;
      
    }
  };
  var merge_acc = function (force_breaks1, force_breaks2) {
    if (force_breaks1) {
      return true;
    } else {
      return force_breaks2;
    }
  };
  var map_node = function (x, force_breaks) {
    switch (x.tag | 0) {
      case /* List */1 :
          var match = x[0];
          var p = match[3];
          var match$1 = p[/* wrap_body */7];
          if (match$1 !== 379096626) {
            if (match$1 !== 451368025) {
              if (match$1 !== 610243080) {
                if (force_breaks) {
                  var p_000 = /* space_after_opening */p[/* space_after_opening */0];
                  var p_001 = /* space_after_separator */p[/* space_after_separator */1];
                  var p_002 = /* space_before_separator */p[/* space_before_separator */2];
                  var p_003 = /* separators_stick_left */p[/* separators_stick_left */3];
                  var p_004 = /* space_before_closing */p[/* space_before_closing */4];
                  var p_005 = /* stick_to_label */p[/* stick_to_label */5];
                  var p_006 = /* align_closing */p[/* align_closing */6];
                  var p_008 = /* indent_body */p[/* indent_body */8];
                  var p_009 = /* list_style */p[/* list_style */9];
                  var p_010 = /* opening_style */p[/* opening_style */10];
                  var p_011 = /* body_style */p[/* body_style */11];
                  var p_012 = /* separator_style */p[/* separator_style */12];
                  var p_013 = /* closing_style */p[/* closing_style */13];
                  var p$1 = /* record */[
                    p_000,
                    p_001,
                    p_002,
                    p_003,
                    p_004,
                    p_005,
                    p_006,
                    /* wrap_body : Force_breaks */610243080,
                    p_008,
                    p_009,
                    p_010,
                    p_011,
                    p_012,
                    p_013
                  ];
                  return /* tuple */[
                          /* List */Block.__(1, [
                              /* tuple */[
                                match[0],
                                match[1],
                                match[2],
                                p$1
                              ],
                              x[1]
                            ]),
                          true
                        ];
                } else {
                  return /* tuple */[
                          x,
                          false
                        ];
                }
              } else {
                return /* tuple */[
                        x,
                        force_breaks
                      ];
              }
            } else {
              return /* tuple */[
                      x,
                      true
                    ];
            }
          } else {
            return /* tuple */[
                    x,
                    force_breaks
                  ];
          }
      case /* Label */2 :
          var match$2 = x[0];
          var lp = match$2[1];
          if (lp[/* label_break */0] !== 726666127) {
            return /* tuple */[
                    x,
                    force_breaks
                  ];
          } else if (force_breaks) {
            var lp_001 = /* space_after_label */lp[/* space_after_label */1];
            var lp_002 = /* indent_after_label */lp[/* indent_after_label */2];
            var lp_003 = /* label_style */lp[/* label_style */3];
            var lp$1 = /* record */[
              /* label_break : Always */-76840209,
              lp_001,
              lp_002,
              lp_003
            ];
            return /* tuple */[
                    /* Label */Block.__(2, [
                        /* tuple */[
                          match$2[0],
                          lp$1
                        ],
                        x[1]
                      ]),
                    true
                  ];
          } else {
            return /* tuple */[
                    x,
                    false
                  ];
          }
      case /* Atom */0 :
      case /* Custom */3 :
          return /* tuple */[
                  x,
                  force_breaks
                ];
      
    }
  };
  return propagate_from_leaf_to_root(init_acc, merge_acc, map_node, x)[0];
}

function set_escape(fmt, $$escape) {
  var match = Format.pp_get_formatter_output_functions(fmt, /* () */0);
  var print0 = match[0];
  var tagf0 = Format.pp_get_formatter_tag_functions(fmt, /* () */0);
  var is_tag = /* record */[/* contents */false];
  var mot = function (tag) {
    is_tag[0] = true;
    return Curry._1(tagf0[/* mark_open_tag */0], tag);
  };
  var mct = function (tag) {
    is_tag[0] = true;
    return Curry._1(tagf0[/* mark_close_tag */1], tag);
  };
  var print = function (s, p, n) {
    if (is_tag[0]) {
      Curry._3(print0, s, p, n);
      is_tag[0] = false;
      return /* () */0;
    } else {
      return Curry._4($$escape, print0, s, p, n);
    }
  };
  var tagf_002 = /* print_open_tag */tagf0[/* print_open_tag */2];
  var tagf_003 = /* print_close_tag */tagf0[/* print_close_tag */3];
  var tagf = /* record */[
    /* mark_open_tag */mot,
    /* mark_close_tag */mct,
    tagf_002,
    tagf_003
  ];
  Format.pp_set_formatter_output_functions(fmt, print, match[1]);
  return Format.pp_set_formatter_tag_functions(fmt, tagf);
}

function define_styles(fmt, $$escape, l) {
  if (l !== /* [] */0) {
    Format.pp_set_tags(fmt, true);
    var tbl1 = Hashtbl.create(undefined, (List.length(l) << 1));
    var tbl2 = Hashtbl.create(undefined, (List.length(l) << 1));
    List.iter((function (param) {
            var style = param[1];
            var style_name = param[0];
            Hashtbl.add(tbl1, style_name, style[/* tag_open */0]);
            return Hashtbl.add(tbl2, style_name, style[/* tag_close */1]);
          }), l);
    var mark_open_tag = function (style_name) {
      try {
        return Hashtbl.find(tbl1, style_name);
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return "";
        } else {
          throw exn;
        }
      }
    };
    var mark_close_tag = function (style_name) {
      try {
        return Hashtbl.find(tbl2, style_name);
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return "";
        } else {
          throw exn;
        }
      }
    };
    var init = Format.pp_get_formatter_tag_functions(fmt, /* () */0);
    var tagf_002 = /* print_open_tag */init[/* print_open_tag */2];
    var tagf_003 = /* print_close_tag */init[/* print_close_tag */3];
    var tagf = /* record */[
      /* mark_open_tag */mark_open_tag,
      /* mark_close_tag */mark_close_tag,
      tagf_002,
      tagf_003
    ];
    Format.pp_set_formatter_tag_functions(fmt, tagf);
  }
  if (typeof $$escape === "number") {
    return /* () */0;
  } else if ($$escape[0] >= 258914209) {
    return set_escape(fmt, $$escape[1]);
  } else {
    var fmt$1 = fmt;
    var esc = $$escape[1];
    var $$escape$1 = function (print, s, p, n) {
      var s0 = $$String.sub(s, p, n);
      var s1 = Curry._1(esc, s0);
      return Curry._3(print, s1, 0, s1.length);
    };
    return set_escape(fmt$1, $$escape$1);
  }
}

function pp_open_xbox(fmt, p, indent) {
  var match = p[/* wrap_body */7];
  if (match >= 451368025) {
    if (match >= 736550845) {
      return Format.pp_open_hvbox(fmt, indent);
    } else {
      return Format.pp_open_vbox(fmt, indent);
    }
  } else if (match >= 379096626) {
    return Format.pp_open_hbox(fmt, /* () */0);
  } else {
    return Format.pp_open_hvbox(fmt, indent);
  }
}

function extra_box(p, l) {
  var match = p[/* wrap_body */7];
  var wrap = match >= 379096626 ? match >= 922275930 : List.for_all((function (param) {
            if (param.tag) {
              return false;
            } else {
              return true;
            }
          }), l);
  if (wrap) {
    return /* tuple */[
            (function (fmt) {
                return Format.pp_open_hovbox(fmt, 0);
              }),
            (function (fmt) {
                return Format.pp_close_box(fmt, /* () */0);
              })
          ];
  } else {
    return /* tuple */[
            (function (param) {
                return /* () */0;
              }),
            (function (param) {
                return /* () */0;
              })
          ];
  }
}

function pp_open_nonaligned_box(fmt, p, indent, l) {
  var match = p[/* wrap_body */7];
  if (match !== 379096626) {
    if (match >= 736550845) {
      if (match >= 922275930) {
        return Format.pp_open_hovbox(fmt, indent);
      } else {
        return Format.pp_open_hvbox(fmt, indent);
      }
    } else if (match >= -921200850) {
      return Format.pp_open_vbox(fmt, indent);
    } else if (List.for_all((function (param) {
              return param.tag ? false : true;
            }), l)) {
      return Format.pp_open_hovbox(fmt, indent);
    } else {
      return Format.pp_open_hvbox(fmt, indent);
    }
  } else {
    return Format.pp_open_hbox(fmt, /* () */0);
  }
}

function open_tag(fmt, param) {
  if (param !== undefined) {
    return Format.pp_open_tag(fmt, param);
  } else {
    return /* () */0;
  }
}

function close_tag(fmt, param) {
  if (param !== undefined) {
    return Format.pp_close_tag(fmt, /* () */0);
  } else {
    return /* () */0;
  }
}

function tag_string(fmt, o, s) {
  if (o !== undefined) {
    Format.pp_open_tag(fmt, o);
    Format.pp_print_string(fmt, s);
    return Format.pp_close_tag(fmt, /* () */0);
  } else {
    return Format.pp_print_string(fmt, s);
  }
}

function fprint_t(fmt, param) {
  switch (param.tag | 0) {
    case /* Atom */0 :
        return tag_string(fmt, param[1][/* atom_style */0], param[0]);
    case /* List */1 :
        var l = param[1];
        var param$1 = param[0];
        var p = param$1[3];
        open_tag(fmt, p[/* list_style */9]);
        if (p[/* align_closing */6]) {
          fprint_list(fmt, undefined, param$1, l);
        } else {
          fprint_list2(fmt, param$1, l);
        }
        return close_tag(fmt, p[/* list_style */9]);
    case /* Label */2 :
        var fmt$1 = fmt;
        var label = param[0];
        var x = param[1];
        var lp = label[1];
        if (x.tag === /* List */1) {
          var match = x[0];
          var p$1 = match[3];
          if (p$1[/* stick_to_label */5] && p$1[/* align_closing */6]) {
            return fprint_list(fmt$1, label, /* tuple */[
                        match[0],
                        match[1],
                        match[2],
                        p$1
                      ], x[1]);
          }
          
        }
        var indent = lp[/* indent_after_label */2];
        Format.pp_open_hvbox(fmt$1, 0);
        open_tag(fmt$1, lp[/* label_style */3]);
        fprint_t(fmt$1, label[0]);
        close_tag(fmt$1, lp[/* label_style */3]);
        var match$1 = lp[/* label_break */0];
        if (match$1 !== 726666127) {
          if (match$1 >= 744337004) {
            if (lp[/* space_after_label */1]) {
              Format.pp_print_char(fmt$1, /* " " */32);
            }
            
          } else {
            Format.pp_force_newline(fmt$1, /* () */0);
            Format.pp_print_string(fmt$1, $$String.make(indent, /* " " */32));
          }
        } else if (lp[/* space_after_label */1]) {
          Format.pp_print_break(fmt$1, 1, indent);
        } else {
          Format.pp_print_break(fmt$1, 0, indent);
        }
        fprint_t(fmt$1, x);
        return Format.pp_close_box(fmt$1, /* () */0);
    case /* Custom */3 :
        return Curry._1(param[0], fmt);
    
  }
}

function fprint_list_body_stick_left(fmt, p, sep, hd, tl) {
  open_tag(fmt, p[/* body_style */11]);
  fprint_t(fmt, hd);
  List.iter((function (x) {
          if (p[/* space_before_separator */2]) {
            Format.pp_print_string(fmt, " ");
          }
          tag_string(fmt, p[/* separator_style */12], sep);
          if (p[/* space_after_separator */1]) {
            Format.pp_print_space(fmt, /* () */0);
          } else {
            Format.pp_print_cut(fmt, /* () */0);
          }
          return fprint_t(fmt, x);
        }), tl);
  return close_tag(fmt, p[/* body_style */11]);
}

function fprint_list_body_stick_right(fmt, p, sep, hd, tl) {
  open_tag(fmt, p[/* body_style */11]);
  fprint_t(fmt, hd);
  List.iter((function (x) {
          if (p[/* space_before_separator */2]) {
            Format.pp_print_space(fmt, /* () */0);
          } else {
            Format.pp_print_cut(fmt, /* () */0);
          }
          tag_string(fmt, p[/* separator_style */12], sep);
          if (p[/* space_after_separator */1]) {
            Format.pp_print_string(fmt, " ");
          }
          return fprint_t(fmt, x);
        }), tl);
  return close_tag(fmt, p[/* body_style */11]);
}

function fprint_opt_label(fmt, param) {
  if (param !== undefined) {
    var match = param;
    var lp = match[1];
    open_tag(fmt, lp[/* label_style */3]);
    fprint_t(fmt, match[0]);
    close_tag(fmt, lp[/* label_style */3]);
    if (lp[/* space_after_label */1]) {
      return Format.pp_print_string(fmt, " ");
    } else {
      return 0;
    }
  } else {
    return /* () */0;
  }
}

function fprint_list(fmt, label, param, l) {
  var p = param[3];
  if (l) {
    var tl = l[1];
    var hd = l[0];
    if (tl === /* [] */0 || p[/* separators_stick_left */3]) {
      var fmt$1 = fmt;
      var label$1 = label;
      var param$1 = param;
      var hd$1 = hd;
      var tl$1 = tl;
      var l$1 = l;
      var p$1 = param$1[3];
      var indent = p$1[/* indent_body */8];
      pp_open_xbox(fmt$1, p$1, indent);
      fprint_opt_label(fmt$1, label$1);
      tag_string(fmt$1, p$1[/* opening_style */10], param$1[0]);
      if (p$1[/* space_after_opening */0]) {
        Format.pp_print_space(fmt$1, /* () */0);
      } else {
        Format.pp_print_cut(fmt$1, /* () */0);
      }
      var match = extra_box(p$1, l$1);
      Curry._1(match[0], fmt$1);
      fprint_list_body_stick_left(fmt$1, p$1, param$1[1], hd$1, tl$1);
      Curry._1(match[1], fmt$1);
      if (p$1[/* space_before_closing */4]) {
        Format.pp_print_break(fmt$1, 1, -indent | 0);
      } else {
        Format.pp_print_break(fmt$1, 0, -indent | 0);
      }
      tag_string(fmt$1, p$1[/* closing_style */13], param$1[2]);
      return Format.pp_close_box(fmt$1, /* () */0);
    } else {
      var fmt$2 = fmt;
      var label$2 = label;
      var param$2 = param;
      var hd$2 = hd;
      var tl$2 = tl;
      var l$2 = l;
      var p$2 = param$2[3];
      var sep = param$2[1];
      var base_indent = p$2[/* indent_body */8];
      var sep_indent = sep.length + (
        p$2[/* space_after_separator */1] ? 1 : 0
      ) | 0;
      var indent$1 = base_indent + sep_indent | 0;
      pp_open_xbox(fmt$2, p$2, indent$1);
      fprint_opt_label(fmt$2, label$2);
      tag_string(fmt$2, p$2[/* opening_style */10], param$2[0]);
      if (p$2[/* space_after_opening */0]) {
        Format.pp_print_space(fmt$2, /* () */0);
      } else {
        Format.pp_print_cut(fmt$2, /* () */0);
      }
      var match$1 = extra_box(p$2, l$2);
      Curry._1(match$1[0], fmt$2);
      fprint_t(fmt$2, hd$2);
      List.iter((function (x) {
              if (p$2[/* space_before_separator */2]) {
                Format.pp_print_break(fmt$2, 1, -sep_indent | 0);
              } else {
                Format.pp_print_break(fmt$2, 0, -sep_indent | 0);
              }
              tag_string(fmt$2, p$2[/* separator_style */12], sep);
              if (p$2[/* space_after_separator */1]) {
                Format.pp_print_string(fmt$2, " ");
              }
              return fprint_t(fmt$2, x);
            }), tl$2);
      Curry._1(match$1[1], fmt$2);
      if (p$2[/* space_before_closing */4]) {
        Format.pp_print_break(fmt$2, 1, -indent$1 | 0);
      } else {
        Format.pp_print_break(fmt$2, 0, -indent$1 | 0);
      }
      tag_string(fmt$2, p$2[/* closing_style */13], param$2[2]);
      return Format.pp_close_box(fmt$2, /* () */0);
    }
  } else {
    fprint_opt_label(fmt, label);
    tag_string(fmt, p[/* opening_style */10], param[0]);
    if (p[/* space_after_opening */0] || p[/* space_before_closing */4]) {
      Format.pp_print_string(fmt, " ");
    }
    return tag_string(fmt, p[/* closing_style */13], param[2]);
  }
}

function fprint_list2(fmt, param, l) {
  var p = param[3];
  var cl = param[2];
  var sep = param[1];
  var op = param[0];
  if (l) {
    var tl = l[1];
    var hd = l[0];
    tag_string(fmt, p[/* opening_style */10], op);
    if (p[/* space_after_opening */0]) {
      Format.pp_print_string(fmt, " ");
    }
    pp_open_nonaligned_box(fmt, p, 0, l);
    if (p[/* separators_stick_left */3]) {
      fprint_list_body_stick_left(fmt, p, sep, hd, tl);
    } else {
      fprint_list_body_stick_right(fmt, p, sep, hd, tl);
    }
    Format.pp_close_box(fmt, /* () */0);
    if (p[/* space_before_closing */4]) {
      Format.pp_print_string(fmt, " ");
    }
    return tag_string(fmt, p[/* closing_style */13], cl);
  } else {
    tag_string(fmt, p[/* opening_style */10], op);
    if (p[/* space_after_opening */0] || p[/* space_before_closing */4]) {
      Format.pp_print_string(fmt, " ");
    }
    return tag_string(fmt, p[/* closing_style */13], cl);
  }
}

function to_formatter(fmt, x) {
  var x$1 = propagate_forced_breaks(x);
  fprint_t(fmt, x$1);
  return Format.pp_print_flush(fmt, /* () */0);
}

function to_buffer($staropt$star, $staropt$star$1, buf, x) {
  var $$escape = $staropt$star !== undefined ? $staropt$star : /* None */870530776;
  var styles = $staropt$star$1 !== undefined ? $staropt$star$1 : /* [] */0;
  var fmt = Format.formatter_of_buffer(buf);
  define_styles(fmt, $$escape, styles);
  return to_formatter(fmt, x);
}

function to_string($$escape, styles, x) {
  var buf = $$Buffer.create(500);
  to_buffer($$escape, styles, buf, x);
  return $$Buffer.contents(buf);
}

function to_channel($staropt$star, $staropt$star$1, oc, x) {
  var $$escape = $staropt$star !== undefined ? $staropt$star : /* None */870530776;
  var styles = $staropt$star$1 !== undefined ? $staropt$star$1 : /* [] */0;
  var fmt = Format.formatter_of_out_channel(oc);
  define_styles(fmt, $$escape, styles);
  return to_formatter(fmt, x);
}

function to_stdout($$escape, styles, x) {
  return to_channel($$escape, styles, Pervasives.stdout, x);
}

function to_stderr($$escape, styles, x) {
  return to_channel($$escape, styles, Pervasives.stderr, x);
}

function fprint_t$1(buf, param) {
  switch (param.tag | 0) {
    case /* Atom */0 :
        return $$Buffer.add_string(buf, param[0]);
    case /* List */1 :
        var buf$1 = buf;
        var param$1 = param[0];
        var param$2 = param[1];
        var cl = param$1[2];
        var sep = param$1[1];
        var op = param$1[0];
        if (param$2) {
          $$Buffer.add_string(buf$1, op);
          fprint_t$1(buf$1, param$2[0]);
          List.iter((function (x) {
                  $$Buffer.add_string(buf$1, sep);
                  return fprint_t$1(buf$1, x);
                }), param$2[1]);
          return $$Buffer.add_string(buf$1, cl);
        } else {
          return Curry._2(Printf.bprintf(buf$1, /* Format */[
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "%s%s"
                        ]), op, cl);
        }
    case /* Label */2 :
        var buf$2 = buf;
        var param$3 = param[0];
        var x = param[1];
        fprint_t$1(buf$2, param$3[0]);
        return fprint_t$1(buf$2, x);
    case /* Custom */3 :
        var fmt = Format.formatter_of_buffer(buf);
        Curry._1(param[0], fmt);
        return Format.pp_print_flush(fmt, /* () */0);
    
  }
}

var to_buffer$1 = fprint_t$1;

function to_string$1(x) {
  var buf = $$Buffer.create(500);
  fprint_t$1(buf, x);
  return $$Buffer.contents(buf);
}

function to_formatter$1(fmt, x) {
  var s = to_string$1(x);
  Curry._1(Format.fprintf(fmt, /* Format */[
            /* String */Block.__(2, [
                /* No_padding */0,
                /* End_of_format */0
              ]),
            "%s"
          ]), s);
  return Format.pp_print_flush(fmt, /* () */0);
}

function to_channel$1(oc, x) {
  var buf = $$Buffer.create(500);
  fprint_t$1(buf, x);
  return $$Buffer.output_buffer(oc, buf);
}

function to_stdout$1(x) {
  return to_channel$1(Pervasives.stdout, x);
}

function to_stderr$1(x) {
  return to_channel$1(Pervasives.stderr, x);
}

var atom = /* record */[/* atom_style */undefined];

var list = /* record */[
  /* space_after_opening */true,
  /* space_after_separator */true,
  /* space_before_separator */false,
  /* separators_stick_left */true,
  /* space_before_closing */true,
  /* stick_to_label */true,
  /* align_closing */true,
  /* wrap_body : Wrap_atoms */-921200851,
  /* indent_body */2,
  /* list_style */undefined,
  /* opening_style */undefined,
  /* body_style */undefined,
  /* separator_style */undefined,
  /* closing_style */undefined
];

var label = /* record */[
  /* label_break : Auto */726666127,
  /* space_after_label */true,
  /* indent_after_label */2,
  /* label_style */undefined
];

var Pretty = {
  define_styles: define_styles,
  to_formatter: to_formatter,
  to_buffer: to_buffer,
  to_string: to_string,
  to_channel: to_channel,
  to_stdout: to_stdout,
  to_stderr: to_stderr
};

var Compact = {
  to_buffer: to_buffer$1,
  to_string: to_string$1,
  to_channel: to_channel$1,
  to_stdout: to_stdout$1,
  to_stderr: to_stderr$1,
  to_formatter: to_formatter$1
};

var Param_list_true = /* record */[
  /* space_after_opening */true,
  /* space_after_separator */true,
  /* space_before_separator */true,
  /* separators_stick_left */true,
  /* space_before_closing */true,
  /* stick_to_label */true,
  /* align_closing */true,
  /* wrap_body : Wrap_atoms */-921200851,
  /* indent_body */2,
  /* list_style */undefined,
  /* opening_style */undefined,
  /* body_style */undefined,
  /* separator_style */undefined,
  /* closing_style */undefined
];

var Param_label_true = /* record */[
  /* label_break : Auto */726666127,
  /* space_after_label */true,
  /* indent_after_label */2,
  /* label_style */undefined
];

var Param_list_false = /* record */[
  /* space_after_opening */false,
  /* space_after_separator */false,
  /* space_before_separator */false,
  /* separators_stick_left */false,
  /* space_before_closing */false,
  /* stick_to_label */false,
  /* align_closing */false,
  /* wrap_body : Wrap_atoms */-921200851,
  /* indent_body */2,
  /* list_style */undefined,
  /* opening_style */undefined,
  /* body_style */undefined,
  /* separator_style */undefined,
  /* closing_style */undefined
];

var Param_label_false = /* record */[
  /* label_break : Auto */726666127,
  /* space_after_label */false,
  /* indent_after_label */2,
  /* label_style */undefined
];

var Param = {
  list_true: Param_list_true,
  label_true: Param_label_true,
  list_false: Param_list_false,
  label_false: Param_label_false
};

exports.atom = atom;
exports.list = list;
exports.label = label;
exports.Pretty = Pretty;
exports.Compact = Compact;
exports.Param = Param;
/* Format Not a pure module */
