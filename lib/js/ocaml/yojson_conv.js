// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Lazy = require("bs-platform/lib/js/lazy.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Int32 = require("bs-platform/lib/js/int32.js");
var Int64 = require("bs-platform/lib/js/int64.js");
var Nativeint = require("bs-platform/lib/js/nativeint.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var ListLabels = require("bs-platform/lib/js/listLabels.js");
var MoreLabels = require("bs-platform/lib/js/moreLabels.js");
var BytesLabels = require("bs-platform/lib/js/bytesLabels.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var StringLabels = require("bs-platform/lib/js/stringLabels.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function yojson_of_unit(param) {
  return /* Null */870828711;
}

function yojson_of_bool(b) {
  return /* `Bool */[
          737456202,
          b
        ];
}

function yojson_of_string(str) {
  return /* `String */[
          -976970511,
          str
        ];
}

function yojson_of_bytes(bytes) {
  return /* `String */[
          -976970511,
          BytesLabels.to_string(bytes)
        ];
}

function yojson_of_char(c) {
  return /* `String */[
          -976970511,
          StringLabels.make(1, c)
        ];
}

function yojson_of_int(n) {
  return /* `Int */[
          3654863,
          n
        ];
}

function yojson_of_float(n) {
  return /* `Float */[
          365180284,
          n
        ];
}

function yojson_of_int32(n) {
  return /* `Intlit */[
          -752863768,
          Int32.to_string(n)
        ];
}

function yojson_of_int64(n) {
  return /* `Intlit */[
          -752863768,
          Int64.to_string(n)
        ];
}

function yojson_of_nativeint(n) {
  return /* `Intlit */[
          -752863768,
          Nativeint.to_string(n)
        ];
}

function yojson_of_ref(yojson_of__a, rf) {
  return Curry._1(yojson_of__a, rf[0]);
}

function yojson_of_lazy_t(yojson_of__a, lv) {
  return Curry._1(yojson_of__a, CamlinternalLazy.force(lv));
}

function yojson_of_option(yojson_of__a, param) {
  if (param !== undefined) {
    return Curry._1(yojson_of__a, Caml_option.valFromOption(param));
  } else {
    return /* Null */870828711;
  }
}

function yojson_of_pair(yojson_of__a, yojson_of__b, param) {
  return /* `List */[
          848054398,
          /* :: */[
            Curry._1(yojson_of__a, param[0]),
            /* :: */[
              Curry._1(yojson_of__b, param[1]),
              /* [] */0
            ]
          ]
        ];
}

function yojson_of_triple(yojson_of__a, yojson_of__b, yojson_of__c, param) {
  return /* `List */[
          848054398,
          /* :: */[
            Curry._1(yojson_of__a, param[0]),
            /* :: */[
              Curry._1(yojson_of__b, param[1]),
              /* :: */[
                Curry._1(yojson_of__c, param[2]),
                /* [] */0
              ]
            ]
          ]
        ];
}

function yojson_of_list(yojson_of__a, lst) {
  return /* `List */[
          848054398,
          ListLabels.rev(ListLabels.rev_map(yojson_of__a, lst))
        ];
}

function yojson_of_array(yojson_of__a, ar) {
  var lst_ref = /* [] */0;
  for(var i = ar.length - 1 | 0; i >= 0; --i){
    lst_ref = /* :: */[
      Curry._1(yojson_of__a, Caml_array.caml_array_get(ar, i)),
      lst_ref
    ];
  }
  return /* `List */[
          848054398,
          lst_ref
        ];
}

function yojson_of_hashtbl(yojson_of_key, yojson_of_val, htbl) {
  var coll = function (k, v, acc) {
    return /* :: */[
            /* `List */[
              848054398,
              /* :: */[
                Curry._1(yojson_of_key, k),
                /* :: */[
                  Curry._1(yojson_of_val, v),
                  /* [] */0
                ]
              ]
            ],
            acc
          ];
  };
  return /* `List */[
          848054398,
          Curry._3(MoreLabels.Hashtbl.fold, coll, htbl, /* [] */0)
        ];
}

function yojson_of_opaque(param) {
  return /* `String */[
          -976970511,
          "<opaque>"
        ];
}

function yojson_of_fun(param) {
  return /* `String */[
          -976970511,
          "<fun>"
        ];
}

var Of_yojson_error = Caml_exceptions.create("Yojson_conv.Of_yojson_error");

var record_check_extra_fields = /* record */[/* contents */true];

function of_yojson_error_exn(exc, yojson) {
  throw [
        Of_yojson_error,
        exc,
        yojson
      ];
}

function of_yojson_error(what, yojson) {
  throw [
        Of_yojson_error,
        [
          Caml_builtin_exceptions.failure,
          what
        ],
        yojson
      ];
}

function unit_of_yojson(yojson) {
  if (yojson !== 870828711) {
    return of_yojson_error("unit_of_yojson: `Null needed", yojson);
  } else {
    return /* () */0;
  }
}

function bool_of_yojson(yojson) {
  if (typeof yojson === "number" || yojson[0] !== 737456202) {
    return of_yojson_error("bool_of_yojson: true/false needed", yojson);
  } else {
    return yojson[1];
  }
}

function string_of_yojson(yojson) {
  if (typeof yojson === "number" || yojson[0] !== -976970511) {
    return of_yojson_error("string_of_yojson: string needed", yojson);
  } else {
    return yojson[1];
  }
}

function bytes_of_yojson(yojson) {
  if (typeof yojson === "number" || yojson[0] !== -976970511) {
    return of_yojson_error("bytes_of_yojson: string needed", yojson);
  } else {
    return BytesLabels.of_string(yojson[1]);
  }
}

function char_of_yojson(yojson) {
  if (typeof yojson === "number" || yojson[0] !== -976970511) {
    return of_yojson_error("char_of_yojson: string of size one needed", yojson);
  } else {
    var str = yojson[1];
    if (str.length !== 1) {
      of_yojson_error("char_of_yojson: string must contain one character only", yojson);
    }
    return Caml_string.get(str, 0);
  }
}

function int_of_yojson(yojson) {
  if (typeof yojson === "number" || yojson[0] !== 3654863) {
    return of_yojson_error("int_of_yojson: integer needed", yojson);
  } else {
    return yojson[1];
  }
}

function float_of_yojson(yojson) {
  if (typeof yojson === "number") {
    return of_yojson_error("float_of_yojson: float needed", yojson);
  } else {
    var variant = yojson[0];
    if (variant !== -752863768) {
      if (variant !== 3654863 && variant !== 365180284) {
        return of_yojson_error("float_of_yojson: float needed", yojson);
      } else {
        return yojson[1];
      }
    } else {
      return Caml_format.caml_float_of_string(yojson[1]);
    }
  }
}

function int32_of_yojson(yojson) {
  if (typeof yojson === "number") {
    return of_yojson_error("int32_of_yojson: integer needed", yojson);
  } else {
    var variant = yojson[0];
    if (variant !== -752863768) {
      if (variant !== 3654863) {
        return of_yojson_error("int32_of_yojson: integer needed", yojson);
      } else {
        return yojson[1];
      }
    } else {
      return Caml_format.caml_int32_of_string(yojson[1]);
    }
  }
}

function int64_of_yojson(yojson) {
  if (typeof yojson === "number") {
    return of_yojson_error("int64_of_yojson: integer needed", yojson);
  } else {
    var variant = yojson[0];
    if (variant !== -752863768) {
      if (variant !== 3654863) {
        return of_yojson_error("int64_of_yojson: integer needed", yojson);
      } else {
        return Caml_int64.of_int32(yojson[1]);
      }
    } else {
      return Caml_format.caml_int64_of_string(yojson[1]);
    }
  }
}

function nativeint_of_yojson(yojson) {
  if (typeof yojson === "number") {
    return of_yojson_error("nativeint_of_yojson: integer needed", yojson);
  } else {
    var variant = yojson[0];
    if (variant !== -752863768) {
      if (variant !== 3654863) {
        return of_yojson_error("nativeint_of_yojson: integer needed", yojson);
      } else {
        return yojson[1];
      }
    } else {
      return Caml_format.caml_nativeint_of_string(yojson[1]);
    }
  }
}

function ref_of_yojson(a__of_yojson, yojson) {
  return /* record */[/* contents */Curry._1(a__of_yojson, yojson)];
}

function lazy_t_of_yojson(a__of_yojson, yojson) {
  return Lazy.from_val(Curry._1(a__of_yojson, yojson));
}

function option_of_yojson(a__of_yojson, yojson) {
  if (yojson !== 870828711) {
    return Caml_option.some(Curry._1(a__of_yojson, yojson));
  }
  
}

function pair_of_yojson(a__of_yojson, b__of_yojson, yojson) {
  if (typeof yojson === "number" || yojson[0] !== 848054398) {
    return of_yojson_error("pair_of_yojson: invalid format", yojson);
  } else {
    var match = yojson[1];
    if (match) {
      var match$1 = match[1];
      if (match$1 && !match$1[1]) {
        var a = Curry._1(a__of_yojson, match[0]);
        var b = Curry._1(b__of_yojson, match$1[0]);
        return /* tuple */[
                a,
                b
              ];
      } else {
        return of_yojson_error("pair_of_yojson: invalid format", yojson);
      }
    } else {
      return of_yojson_error("pair_of_yojson: invalid format", yojson);
    }
  }
}

function triple_of_yojson(a__of_yojson, b__of_yojson, c__of_yojson, yojson) {
  if (typeof yojson === "number" || yojson[0] !== 848054398) {
    return of_yojson_error("triple_of_yojson: invalid format", yojson);
  } else {
    var match = yojson[1];
    if (match) {
      var match$1 = match[1];
      if (match$1) {
        var match$2 = match$1[1];
        if (match$2 && !match$2[1]) {
          var a = Curry._1(a__of_yojson, match[0]);
          var b = Curry._1(b__of_yojson, match$1[0]);
          var c = Curry._1(c__of_yojson, match$2[0]);
          return /* tuple */[
                  a,
                  b,
                  c
                ];
        } else {
          return of_yojson_error("triple_of_yojson: invalid format", yojson);
        }
      } else {
        return of_yojson_error("triple_of_yojson: invalid format", yojson);
      }
    } else {
      return of_yojson_error("triple_of_yojson: invalid format", yojson);
    }
  }
}

function list_of_yojson(a__of_yojson, yojson) {
  if (typeof yojson === "number" || yojson[0] !== 848054398) {
    return of_yojson_error("list_of_yojson: list needed", yojson);
  } else {
    return ListLabels.rev(ListLabels.rev_map(a__of_yojson, yojson[1]));
  }
}

function array_of_yojson(a__of_yojson, yojson) {
  if (typeof yojson === "number" || yojson[0] !== 848054398) {
    return of_yojson_error("array_of_yojson: list needed", yojson);
  } else {
    var match = yojson[1];
    if (match) {
      var t = match[1];
      var len = ListLabels.length(t) + 1 | 0;
      var res = Caml_array.caml_make_vect(len, Curry._1(a__of_yojson, match[0]));
      var _i = 1;
      var _param = t;
      while(true) {
        var param = _param;
        var i = _i;
        if (param) {
          Caml_array.caml_array_set(res, i, Curry._1(a__of_yojson, param[0]));
          _param = param[1];
          _i = i + 1 | 0;
          continue ;
        } else {
          return res;
        }
      };
    } else {
      return /* array */[];
    }
  }
}

function hashtbl_of_yojson(key_of_yojson, val_of_yojson, yojson) {
  if (typeof yojson === "number" || yojson[0] !== 848054398) {
    return of_yojson_error("hashtbl_of_yojson: list needed", yojson);
  } else {
    var htbl = Curry._2(MoreLabels.Hashtbl.create, undefined, 0);
    var act = function (param) {
      if (typeof param === "number" || param[0] !== 848054398) {
        return of_yojson_error("hashtbl_of_yojson: tuple list needed", yojson);
      } else {
        var match = param[1];
        if (match) {
          var match$1 = match[1];
          if (match$1 && !match$1[1]) {
            return Curry._3(MoreLabels.Hashtbl.add, htbl, Curry._1(key_of_yojson, match[0]), Curry._1(val_of_yojson, match$1[0]));
          } else {
            return of_yojson_error("hashtbl_of_yojson: tuple list needed", yojson);
          }
        } else {
          return of_yojson_error("hashtbl_of_yojson: tuple list needed", yojson);
        }
      }
    };
    ListLabels.iter(act, yojson[1]);
    return htbl;
  }
}

function opaque_of_yojson(yojson) {
  return of_yojson_error("opaque_of_yojson: cannot convert opaque values", yojson);
}

function fun_of_yojson(yojson) {
  return of_yojson_error("fun_of_yojson: cannot convert function values", yojson);
}

var Primitives = {
  yojson_of_unit: yojson_of_unit,
  yojson_of_bool: yojson_of_bool,
  yojson_of_string: yojson_of_string,
  yojson_of_bytes: yojson_of_bytes,
  yojson_of_char: yojson_of_char,
  yojson_of_int: yojson_of_int,
  yojson_of_float: yojson_of_float,
  yojson_of_int32: yojson_of_int32,
  yojson_of_int64: yojson_of_int64,
  yojson_of_nativeint: yojson_of_nativeint,
  yojson_of_ref: yojson_of_ref,
  yojson_of_lazy_t: yojson_of_lazy_t,
  yojson_of_option: yojson_of_option,
  yojson_of_list: yojson_of_list,
  yojson_of_array: yojson_of_array,
  yojson_of_hashtbl: yojson_of_hashtbl,
  unit_of_yojson: unit_of_yojson,
  bool_of_yojson: bool_of_yojson,
  string_of_yojson: string_of_yojson,
  bytes_of_yojson: bytes_of_yojson,
  char_of_yojson: char_of_yojson,
  int_of_yojson: int_of_yojson,
  float_of_yojson: float_of_yojson,
  int32_of_yojson: int32_of_yojson,
  int64_of_yojson: int64_of_yojson,
  nativeint_of_yojson: nativeint_of_yojson,
  ref_of_yojson: ref_of_yojson,
  lazy_t_of_yojson: lazy_t_of_yojson,
  option_of_yojson: option_of_yojson,
  list_of_yojson: list_of_yojson,
  array_of_yojson: array_of_yojson,
  hashtbl_of_yojson: hashtbl_of_yojson
};

exports.yojson_of_unit = yojson_of_unit;
exports.yojson_of_bool = yojson_of_bool;
exports.yojson_of_string = yojson_of_string;
exports.yojson_of_bytes = yojson_of_bytes;
exports.yojson_of_char = yojson_of_char;
exports.yojson_of_int = yojson_of_int;
exports.yojson_of_float = yojson_of_float;
exports.yojson_of_int32 = yojson_of_int32;
exports.yojson_of_int64 = yojson_of_int64;
exports.yojson_of_nativeint = yojson_of_nativeint;
exports.yojson_of_ref = yojson_of_ref;
exports.yojson_of_lazy_t = yojson_of_lazy_t;
exports.yojson_of_option = yojson_of_option;
exports.yojson_of_pair = yojson_of_pair;
exports.yojson_of_triple = yojson_of_triple;
exports.yojson_of_list = yojson_of_list;
exports.yojson_of_array = yojson_of_array;
exports.yojson_of_hashtbl = yojson_of_hashtbl;
exports.yojson_of_opaque = yojson_of_opaque;
exports.yojson_of_fun = yojson_of_fun;
exports.Of_yojson_error = Of_yojson_error;
exports.record_check_extra_fields = record_check_extra_fields;
exports.of_yojson_error = of_yojson_error;
exports.of_yojson_error_exn = of_yojson_error_exn;
exports.unit_of_yojson = unit_of_yojson;
exports.bool_of_yojson = bool_of_yojson;
exports.string_of_yojson = string_of_yojson;
exports.bytes_of_yojson = bytes_of_yojson;
exports.char_of_yojson = char_of_yojson;
exports.int_of_yojson = int_of_yojson;
exports.float_of_yojson = float_of_yojson;
exports.int32_of_yojson = int32_of_yojson;
exports.int64_of_yojson = int64_of_yojson;
exports.nativeint_of_yojson = nativeint_of_yojson;
exports.ref_of_yojson = ref_of_yojson;
exports.lazy_t_of_yojson = lazy_t_of_yojson;
exports.option_of_yojson = option_of_yojson;
exports.pair_of_yojson = pair_of_yojson;
exports.triple_of_yojson = triple_of_yojson;
exports.list_of_yojson = list_of_yojson;
exports.array_of_yojson = array_of_yojson;
exports.hashtbl_of_yojson = hashtbl_of_yojson;
exports.opaque_of_yojson = opaque_of_yojson;
exports.fun_of_yojson = fun_of_yojson;
exports.Primitives = Primitives;
/* No side effect */
